%%%%%%%%%%%%%%%%%%%%%% Folder organization %%%%%%%%%%%%%%%%%%%%%%

root
	CreateMatrix.jar       %JAR file of CreateMatrix
	Domino.jar             %JAR file of Domino
	DD.jar			 %JAR file of DD Algoritm

	CreateMatrix.zip		 %ZIP file of CreateMatrix source code
	Domino.zip			 %ZIP file of Domino source code
	DD.zip			 %ZIP file of DD Algorithm source code

	execExamples		 %contains some executable file of 
					 %on iris.csv with max threshold '4'

	datasets			 %contains datasets that must be used	
		matrices		 %contains matrices produced by 
					 %CreateMatrix

	Domino			 %contains Domino logs and results
		log
		output
	DD				 %contains DD Algorithm logs and 
					 %results
		log
		output
			BF
			BU-Ne
			IE-TD-Po	


%%%%%%%%%%%%%%%%%%%%%%%%% Create Matrix %%%%%%%%%%%%%%%%%%%%%%%%%
It permits to create distance relations (Preprocessing) which can be used by Domino and DD algorithms. It is required to first create a distance relation, and then execute discovery algorithms. The distance relation will be generated as CSV file and saved into one sub-folder of /datasets/matrices/ according to the specified parameters.  

Parameters:

args0: 
An input CSV file (containig a relation instance) stored into the folder /datasets: "<nameFile.csv>" 

args1: 
A boolean value determining if the inputed CSV files contain (true) or not contain (false) the header: "<header>"

args2: 
A textual value determining the separator used into the CSV file: "<separator>"

args3:
A textual value determining the symbol(s) used in the CSV files to define null values: "<nullvalue>"

args4:
A boolean value enabling (true) or not (false) the log-step for grouping distance thresholds: "<log>"

args5:
A numeric value allowing users to define a max distance threshold for the discovery: "<maxthr>"  

The value "0" represents the fact that no max thresholds will be considered.

args6: 
A boolean value enabling the levenshtein distance (true) or the q-grams distance (false) as distance function for textual values: "<lev>" 

Example:
A possible command could be 

java -jar CreateMatrix.jar "iris.csv" "false" "," "?" "false" "4" "true"

It permits to create a distance matrix for the dataset iris.csv, which does not contain an header, uses the comma as separator, and contains the symbol '?' as null value. The matrix will be generated by setting a max distance threshold equals to '4' for all columns, and by considering the levenshtein distance as distance function for texutal values.


%%%%%%%%%%%%%%%%%%%%%%%%%%%% Domino %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
It implements the Domino algorithm, and permits to discover RFDcs (Discovery). It recall a distance matrix created by CreateMatrix and stored into one sub-forlder of /datasets/matrices/ according to the specified parameters.  The discovered RFDcs will be saved into a TXT file into /Domino/output/ according to the specified parameters. A log file will be saved into /Domino/log/ .

Parameters:

args0: 
An input CSV file (containig a relation instance) stored into the folder /datasets: "<nameFile.csv>" 

args1: 
A boolean value determining if the inputed CSV files contain (true) or not contain (false) the header: "<header>"

args2: 
A textual value determining the separator used into the CSV file: "<separator>"

args3:
A textual value determining the symbol(s) used in the CSV files to define null values: "<nullvalue>"

args4:
A boolean value enabling (true) or not (false) the log-step for grouping distance thresholds: "<log>"

args5:
A numeric value allowing users to define a max distance threshold for the discovery: "<maxthr>"  

The value "0" represents the fact that no max thresholds will be considered.

Example:
A possible command could be 

java -jar Domino.jar "iris.csv" "false" "," "?" "false" "4"

It discovers RFDcs for the dataset iris.csv, which does not contain an header, uses the comma as separator, and contains the symbol '?' as null value. It recalls the matrix generated by setting a max distance threshold equals to '4'.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% DD %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
It implements the DD Discovery algorithm versions: Brute Force (BF), Buttom-up with negative pruning (BU-Ne), and Top-down with positive pruning and instance exclusion (IE-TD-Po). It permits to discover Differential Dependencies (DDs) by associating 'maxThr'+1 differential functions for each dataset column. It recall a distance matrix created by CreateMatrix and stored into one sub-folder of /datasets/matrices/ according to the specified 'maxThr', which is used to make validation.  The discovered DDs will be saved into a TXT file into /DD/output/<version> according to the specified version. A log file will be saved into /DD/log/ .

Parameters:

args0: 
An input CSV file (containig a relation instance) stored into the folder /datasets: "<nameFile.csv>" 

args1:
A numeric value allowing users to define a max distance threshold for the discovery: "<maxthr>"  

args2:
A nominal value allowing users to define the DD discovery version that must be executed: "<versione>". The possible values are:

- "0" to execute the BF version
- "1" to execute the BU-Ne version
- "2" to execute the IE-TD-Po  version


Example:
A possible command could be 

java -jar DD.jar "iris.csv" "4" "0"

It discovers DDs for the dataset iris.csv by executing the BF version. It considers five differential functions into the range [0,4] for each dataset colum, and recalls the matrix generated by setting a max distance threshold equals to '4'.
